class TrieNode:
    def __init__(self):
        self.children={}
        self.isWord=False
        self.value=0
class MapSum:
    def __init__(self):
        self.root=TrieNode()

    def insert(self, key: str, val: int) -> None:
        node:TrieNode=self.root
        for c in key:
            node=node.children.setdefault(c,TrieNode())
        node.isWord=True
        node.value=val

    def sum(self, prefix: str) -> int:
        node:TrieNode=self._find(prefix)
        return self._dfs(node)

    
    def _find(self,prefix:str)->Optional[TrieNode]:
        node:TrieNode=self.root
        for c in prefix:
            if c not in node.children:
                return None
            node=node.children[c]
        return node
    def _dfs(self, node: TrieNode) -> int:
        if not node:
            return 0
        total = 0
        if node.isWord:
            total += node.value
        for child in node.children.values():
            total += self._dfs(child)
        return total



# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
        


# Your MapSum object will be instantiated and called as such:
# obj = MapSum()
# obj.insert(key,val)
# param_2 = obj.sum(prefix)